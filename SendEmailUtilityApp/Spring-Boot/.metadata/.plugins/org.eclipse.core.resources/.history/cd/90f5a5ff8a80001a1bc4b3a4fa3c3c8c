package brix.core.send.email;
/***********
 * @author pratiksha.datir
 */
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.MediaType;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import brix.core.send.email.bean.User;

@RestController
public class JavaMailSenderService{
	
	private static final Logger logger = LoggerFactory.getLogger(JavaMailSenderService.class);
	
	static final String URL_USERDETAILS = "http://localhost:8081/getUserDetails/getDetails";

	@Value("${spring.mail.host}")
	String host;

	@Value("${spring.mail.username}")
	String username;

	@Value("${spring.mail.password}")
	String password;

	@Value("${spring.mail.port}")
	int port;

	@Value("${spring.mail.properties.mail.protocol}")
	String protocol;

	@Value("${spring.mail.properties.mail.smtp.auth}") 
	String auth;

	List<User> userList = Collections.synchronizedList(new ArrayList<User>());
	
	/*****
	 * Method used to get session object for sending an email.
	 * @return Session
	 */
	private Session getsession() {
		logger.info("Getting session for sending an email...");
		Properties properties = new Properties();
		Session session = null;
		try {
			properties.put("mail.smtp.host", host);
			properties.put("mail.smtp.auth", auth);
			properties.put("mail.smtp.port", port);
			properties.put("mail.transport.protocol", protocol);
			session = Session.getInstance(properties, new javax.mail.Authenticator() {
				protected PasswordAuthentication getPasswordAuthentication() {
					return new PasswordAuthentication(username, password);
				}
			});
		}catch(Exception e) {
			logger.error("Error while getting session...");
		}
		return session;
	}
	/****
	 * Method used for sending email to specified user
	 * @return
	 */
	@Scheduled(fixedDelayString = "${sendEmail.fixedDelay.in.milliseconds}", 
			initialDelayString = "${sendEmail.initialDelay.in.milliseconds}")
	public boolean sendEmail() {
		Boolean isSend = false;
		MimeMessage mimeMessage = null;
		Session session = null;
		try {
			session = getsession();
			logger.info("Email sending...");
			if(userList!=null && !userList.isEmpty()) { 
				for (User user : userList) {
					if(session!=null) {
						mimeMessage = new MimeMessage(session);
						mimeMessage.setFrom(new InternetAddress(username));
						if(user.getToUser().toString().contains(",")) {
							String[] toUser = user.getToUser().split(",");
							for(String touser:toUser) {
								mimeMessage.addRecipient(Message.RecipientType.TO,  new InternetAddress(touser));
							}
						}else {
							mimeMessage.addRecipient(Message.RecipientType.TO,  new InternetAddress(user.getToUser()));
						}
						
						if(user.getToCCUser().toString().contains(",")) {
							String[] toCCUser = user.getToUser().split(",");
							for(String toccuser:toCCUser) {
								mimeMessage.addRecipient(Message.RecipientType.TO,  new InternetAddress(toccuser));
							}
						}else {
							mimeMessage.addRecipient(Message.RecipientType.TO,  new InternetAddress(user.getToCCUser()));
						}
						mimeMessage.setSubject(user.getSubject());
						mimeMessage.setContent(user.getBody(), "text/html;charset=utf-8");
						Transport.send(mimeMessage);
						isSend = true;
						logger.info("Email sent...");
					}
				}
			}
		}catch(Exception e) {
			isSend = false;
			System.out.println("Exception while sending email :"+e.getMessage()+":"+e.getCause());
			logger.error("Error while sending an email...");
		}
		return isSend;
	}
	
	/******
	 * Get details for sending mail from specified URL.
	 */
	@RequestMapping(value="/sendMail", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	public void getMailDetails(@RequestBody User user) {
		logger.info("Get Mail Details...");
		try {
		userList.add(user);
		}catch(Exception e) {
			System.out.println("Exception while getting email details :"+e.getMessage()+":"+e.getCause());
			logger.error("Error while getting mail details...");
		}
	}
}